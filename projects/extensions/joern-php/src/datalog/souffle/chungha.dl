.decl edge(start:number, end:number)
.decl def(stmt:number, var:number)
.decl star_def(stmt:number, var:number)
.decl use(stmt:number, var:number)
.decl source(stmt:number)
.decl sink(stmt:number)
.decl tainted(stmt:number)
.decl tainted_sink(stmt:number)
.decl nokill(stmt:number)
.decl kill(stmt:number, var:number)
.decl datadep(def_stmt:number, use_stmt:number, var:number)

.input edge(IO=file, filename="tmp/edge.csv")
.input def(IO=file, filename="tmp/def.csv")
.input star_def(IO=file, filename="tmp/star_def.csv")
.input use(IO=file, filename="tmp/use.csv")
.input source(IO=file, filename="tmp/source.csv")
.input sink(IO=file, filename="tmp/sink.csv")
.input nokill(IO=file, filename="tmp/nokill.csv")
.input kill(IO=file, filename="tmp/kill.csv")

.decl livedef(var:number, def_stmt:number, this_stmt:number)

// only init liveness for source variables
livedef(def_stmt, var, def_stmt) :- def(def_stmt, var), source(def_stmt).

// propogate liveness for initial source
livedef(prev_stmt, var, this_stmt) :- livedef(prev_stmt, var, prev_stmt), edge(prev_stmt, this_stmt).

// propogate liveness until we reach an assignment
// if there is no def of the var at this statement, we always let the def pass
livedef(def_stmt, var, this_stmt) :- livedef(def_stmt, var, prev_stmt), edge(prev_stmt, this_stmt), !def(prev_stmt, var), !kill(prev_stmt, var).
// or, if there is a def, but this is a special non-killing statement (e.g. recursive call), let the def pass
livedef(def_stmt, var, this_stmt) :- livedef(def_stmt, var, prev_stmt), edge(prev_stmt, this_stmt), nokill(prev_stmt).
// or if there is a def, but the live def is a star def, and this is not a killing statement (e.g. a CFG func exit), then
// let the def pass
livedef(def_stmt, var, this_stmt) :- livedef(def_stmt, var, prev_stmt), edge(prev_stmt, this_stmt), star_def(def_stmt, var), !kill(prev_stmt, var).

// statements that use a live def are tainted
tainted(this_stmt) :- livedef(def_stmt, var, this_stmt), use(this_stmt, var).

// make a livedef for each def'd variable at a tainted statement
livedef(def_stmt, var, def_stmt) :- tainted(def_stmt), def(def_stmt, var).

// get tainted sinks
tainted_sink(this_stmt) :- sink(this_stmt), tainted(this_stmt).

// compute data dependences
datadep(def_stmt, use_stmt, var) :- livedef(def_stmt, var, use_stmt), use(use_stmt, var).

.output tainted_sink
.output datadep
.output livedef
