.decl edge(start:number, end:number)
.decl def(stmt:number, var:number)
.decl use(stmt:number, var:number)
.decl source(stmt:number)
.decl sink(stmt:number)
.decl tainted(stmt:number)
.decl tainted_sink(stmt:number)
.decl nokill(stmt:number)
.decl gold_tainted_sink(stmt:number)
.decl safe_sink(stmt:number)
.decl unreachable_tainted_sink(stmt:number)
.decl reachable_safe_sink(stmt:number)

.decl path(start:number, end:number)
.decl reachable(stmt:number)

.input edge(IO=file, filename="tmp/edge.csv")
.input def(IO=file, filename="tmp/def.csv")
.input use(IO=file, filename="tmp/use.csv")
.input source(IO=file, filename="tmp/source.csv")
.input sink(IO=file, filename="tmp/sink.csv")
.input safe_sink(IO=file, filename="tmp/safe_sink.csv")
.input nokill(IO=file, filename="tmp/nokill.csv")

path({{id}}, end) :- edge({{id}}, end).
path({{id}}, end) :- path({{id}}, mid), edge(mid, end).
reachable(stmt) :- path({{id}}, stmt).
reachable_safe_sink(stmt) :- path({{id}}, stmt), safe_sink(stmt).

//
//path(start, end) :- source(start), edge(start, end).
//path(start, end) :- path(start, mid), edge(mid, end).
//reachable(stmt) :- source(start), path(start, stmt).
.output reachable
